How to solve it using Python?

This is a medium to an advance level tutorial, that would analyze how to solve
the commonly occuring programming problems using Python. 
One good way to develop applications is to divide the problem into smaller managable chunks and the build those.
Once we identify and define those smaller pieces of tasks, our problem becomes incredibly easier.

In this tutorial, we will identify the commonly occuring smaller tasks that would fit into to bigger problems.
It would be handy reference to keep all those recipes in hand so that when we need them most, we will have them at our disposal.


* A Brief Overview of Standard Library.
This would be an outline for what is available and where to look for particular needs.
** Review of Regular Expressions.
** Construting lists with list comprehension.
** Handling Exceptions
** Generator functions.

* Outline of the Tutorial.

* A Quick tour of the Python Standard Library Module.
 
** collections module - High Performance container datatype
** itertools module - Functions creating iterators for efficient looping.

* Filter a String for a set of characters.
* translate method on the string and and the maketrans function.
* Checking Whether a String contains a Set of Characters 
* Expanding and Compressing Tabs

* Making Multiple Replacements in a String in a Single Pass.

* Reading a Text Files by Paragraphs.


File Related
* Reading a Single Line from a file, given a line number.
  Using the linecache module and a regular way.
* Using Random Access Input/Output
* Walking a Directory Tree. (os.path module)
* Finding Files Given a Search Path and a Pattern.

Date time Related
* Efficient Strategies for handling Date and Time related tasks.
* datetime module, time module.
* Calculating Time Periods in a Date Range.
* Scheduling certain tasks using Python.
* Difference between sort method on the list and a sorted function. Why the builtin sort is super-fast (because it is timsort!)

Object Oriented Programming.
** Implementing Tuples with Named Items.
** Borg Idiom - How it is shapes itself for Singleton Design Pattern.

Databases
** Serializing Data using pickle and cPickle Modules.


Subprocess module
** Compturing the Output and Error Streams from a Unix Shell Command.
** Forking a Daemon Process on Unix.
** Program Execution on Windows.

Processing XML
** Checking XML Well Formedness.
** Parsing XML using xml.etree module (very easy)

Network Programming
** Detecting Inactive Computers in a network using the socket module.
** Connecting to IRC and logging the messages to Disk.

Web Programming
** Parsing RSS Feeds
** 

Importing from a module whose name is determined at runtime.

Performance Measurements using timeit module


The idea of the tutorial is give the correct intuition when approaching the problem.

Unit Tests
** How to write Unittests for your Python programs using unittest module.
** 

How to Convert Python 2 to Python 3.
* 2to3 tool.
* Problems with Strings and Unicode.
* How to handle the Strings vs bytes issue. Will *your* be affected? How to identify and how to resolve.
* 

* A very brief Introduction to Python and Python Standard Library (20 minutes)
	- Introduction to Python. 
		- Recollecting topics from earlier tutorials.
	- Brief tour of Standard Library. 
		- Giving the audience an overall picture.
		- Explaining the "Batteries Included" philosophy.
	- Operating System Interface.
	- Command Line Arguments.
	- String Pattern Matching.
	- Internet Access
	- Multi-threading.
	- Logging.
	- Structure of the Python Standard Library in Python 2.6 and Changes to
	  Standard Library in Python 3.0.
	- How to get help about a particular library module.

* Built-In Modules and Exceptions. (30 minutes)
	- Example Program 1 which explains the built-in functions
		- abs
		- dir
		- enumerate
		- file
		- hasattr
		- setattr
		- getattr
	- Example Program 2 which explains the built-in types
		- and, or, not
		- int, float, long, complex
		- dict
		- iterator types.
		- File Objects.
	- Built-In Exceptions.
		- Example Program 3 explaining demonstrating Exceptions

* Operating Systems, Files and Directory Access. (30 minutes)
	- Overview of various modules present in this category. ( Tabular form)
	- Peek into certain modules in detail. My idea is to divide the 30 minute session into two snippets(15 minutes each), while effectively demonstrating certain modules usage and important methods in that module.  Other sections will follow the similar pattern.
		- os
		- time
		- shutil
		- glob
		- ConfigParser
		- logging
	- Changes in Python 3.0 for modules under this category.

* Internet Protocols and support -I . (10 minutes)
	- Overview.
	- Details of the Modules.
	- urllib, urlparse.
	- BaseHTTPServer

* Break timing.

* Internet Protocols and support -II . (20 minutes)
	- SimpleXMLRPCServer
	- smtpd
	- smtplib
	- Changes in Python 3.0 for modules under this category.

* Operating System Services and IPC. (30 minutes)
	- Overview.
	- threading and thread
	- signal
	- subprocess
	- Limitations - global lock in threading.
	- Changes in Python 3.0 for modules under this category.

* Development Tools (30 minutes)
	- Overview
	- pydoc.
	- doctest
	- unittest
	- 2to3
	- test and test_support.

* Extending the library module in your programs. (10 minutes)
	- 'duck-typing' explained.
	- Example Program explaining extending the ConfigParser module to read
	  a particular format of a Config file.
