Tutorial: Asynchoronous Event Based Networking Programming using 
Twisted Matrix, A Python Framework

Tutorial Presentor:
O.R.Senthil Kumaran
Senior Software Engineer.
Akamai Technologies, Bangalore


Agenda
1.Python Programming Language – 30 minutes.
2.Network Programming Essentials
3.Programming Concepts and ways to handle concurrency.
4.Handling Concurrency in Network Programming.


Abstract

Python Programming Language  

Before we start understanding Twisted, we need to understand certain features 
of the programming language that are used to design Twisted. 

Twisted is designed using Python Programming Language, which is a Very High
Level, Object Oriented Programming language, with the support for Dynamic
typing and adheres itself very well to Rapid Application Development.  It is
common understanding amongst the Python developers that when developers start
writing applications in python, they invariable try to write a framework that
would be host the application and would become the base for many future
applications. Python standard library is vast and provides capabilities to do a
variety of tasks from handling sunaudiodev files to parsing urls. It also
provides a number of modules for doing asynchrnous programming. But those are
limited in their capabilities and requires a great design decisions from the
developer using those module inorder to request handlers in a non-blocking way. 

Also as python delegates the threads to the Operating System Scheduler and when
in execution it itselfs runs a child process, it is not capable of exploiting
the capablities provided by multi core environments when run as a multi
threaded process. All these possess a enough challenge to develop applications
using Python for for design a networking server. 

Network programming Essentials 

In Computing, Network Programming is essentially identified as socket
programming or client-server programming, involves writing computer programs
that communicate with other programs across the Computer Network.  The program
initiating the communication is called the client and the program waiting for
the communication to get initiated is called the server. 

The client and the server process together form the distributed system. The
connection between the client and the server process may be connection oriented
(TCP/IP or session) or connectionless (UDP) 

The program that can act both as server and client is based on peer-to-peer
communication. Sockets are usually implemented by an API library such a
Berkeley sockets, first introduced in 1983. The example functions provided by 
the API library include: 

1. socket() - creates a new socket of certain type, identified by the integer 
number and allocates system resources to it. 
2. bind() is used at the server side; associates a socket with a socket 
adddress structure, typically a IP Address and a Port number. 
3. listen() is used again on the server side, causes a bound TCP socket to 
listen to enter a listening state. 
4. connect() is used on the client side; used to assign a free local port 
number to the socket. It causes an attempt to establish a new TCP Connection. 
5. accept() is used on the server side; It accepts a received incoming 
connect() request and creates a new socket associated with the socket address 
pair for this connection. 
6. send(), recv(), write(), read() or recvfrom() and sendto() are used for sending and receiving data. 
7. close() is used to terminate the connection and release the resources allocated to the socket. 

Programming Concepts and ways to handle concurrency 

A fundamental feature for Network Programming is waiting for data. Not waiting
on data, handle each connection in a separate OS process, so that the OS will
take of letting other process run while one is waiting. 

Handle each connection in a separate thread, threading framework takes care of 
the details. Use non-blocking system calls to handle all connections in one thread. 

When dealing with many connections in one thread, the scheduling is the
responsibliety of the application, not the operating system and is usually
implemented by calling a registered function when each function is ready to go
for reading or writing - commonly known as asynchornous, event based, callback
based programming. 

In synchoronous programming, a function requests data, waits for the data and
then processes it. In asynchronous programming, a function requests data, and
lets the library call the callback function when the data is ready. 

It is the class of concurrency problems, non computationally intensive 
tasks that involes an appreciable delay that deferreds are designed to help 
solve. They do this by simple management interface for callbacks and 
applications. Blocking, means if one task is waiting for data, the other task 
cannot get CPU but also wait until the first one finishes. The typical 
asynchronous model is to notify the applicatin that some data is ready is 
called as callback. 

Handling Concurrency
Waiting for answers 
Not waiting on data 
Non-blocking calls
Callbacks 

Programming Paradigms

Certain Programming Paradigms that help in designing Network programming based
concurrency. 

Reactor Design Pattern. 
Reactor basics 
Using Threads. 
Using processes 
Scheduling 
Event Loop 
Message Dispatcher. 

Event Driven Programming 

Event Driven programming or Event Based Programming is where program flow 
happens based on events like mouse movement or key press or signal from another 
thread.  It works by polling an internal or external event provider which 
generally *blocks* until an event has arrived and then calls the relevant event 
handler in order to handle the event.  The event loop may be used in conjuction 
with a reactor, if the event provider follows a file interface, which can be 
select(ed) or poll(ed).  The event loop almost always operates asynchronously 
with the message originator.  The event loop forms the central constuct flow of 
the program, is the highest level of control within the program. It is often 
termed as the main-loop or the main-event loop.  The event loop is the specific 
implementation techniques of system which does message passing.  Under Unix, 
everything is a file-paradigm naturally leads to a file based event-loop. 
select and poll system calls monitor a set of file-descriptors for events. 

Reactor Design Pattern. 

The reactor design pattern is a concurrent programming pattern, for handling
service requests delivered concurrently to a service handler by one or more
inputs. 

The service handler then demultiplexes the incoming requests and dispatches
them synchronously to associated request handlers. 

One of few things in Unix that do not confirm to file descriptors are 
asynchronous events (signals); signals are received in signal handlers, small, 
limited piece of code that run while rest of the task is suspended. 


Factory Method Pattern 

It is an Object Oriented, Creational Design Pattern, dealing with creation of
objects (products) without specifying the exact class. The creational patterns
abstract the concept of instantiating objects. 

Factory pattern is a fundamental pattern in python, while languages like C++
use a ClassName class syntax to create classes, python uses a function class
syntax to create objecs. Even builtin types like str, int provides factory
design pattern. 

Interfaces in Python 

Interface classes are a way of specifying what methods and attributes an
Object. 

Callbacks in Python 

Introduction to Twisted 
======================= 

Twisted is a platform for developing Internet applications. 

Twisted is an Asynchronous, Event-Driven Applications for Distributed Network 
Environment.  At the core of the Twisted Framework is its Network Layer, which 
can be used to integrated with any existing protocol as well as model new ones. 
It is an Event Driven Network Programming Framework. It borrows the Model of 
Event Driven from the GUI Applications and uses it as a way to provide 
asynchronous message handling. 

Twisted is built with the assumption that with the right library, even driven 
programming is easier than multi-threaded programming.  Twisted is a pure 
python framework, as a platform twisted should is focussed on integration and 
it supports asynchrnous programming and deferred abstrations, with symbolizes a 
promised result and which can pass eventual result to handler functions. 

Twisted project supports TCP, UDP, SSL/TLS and IP Multicast, Unix Domain 
Sockets, a large number of protocols such  as HTTP, XMPP, NNTP, IMAP, SSH, IRC, 
FTP. 

Twisted seperates protocols from the underlying transport layer. This 
seperation has the advantages of resuability (for example, using the same 
clients and servers over SSL) and testability (because it is easy to test the 
protocol with a much lighter test harness) among others. Twisted also has a 
very flexible main-loop which can interoperate with third-party main-loops, 
making it usable in GUI programs too. 

In the Event Driven Programming Paradigm, the users of the twisted write short 
callbacks which gets called by the Framework. The Framework provide a distinct 
separation between the logical protocols (HTTP and POP3) and physical 
connection layer such as files, sockets and SSL Libraries. Connection between 
the logical protocol and the transport layer happens at the last possible 
moment, just before the information is transferred from the physical layer to 
the logical protocol instance. 

Make the Blocking Code Non-Blocking - Is it Possible? 
----------------------------------------------------- 

Deferreds cannot automatically make a Blocking code, Non-Blocking. A deferred 
is just a simple object that represents a deferred result, with methods for 
adding callbacks and errbacks. 

If there is a blocking code that needs to be used in a non-blocking manner, 
either rewrite it to be non-blocking one or run it in  a thread. 

Concept of Deffereds 
==================== 

   2. Deferreds 
   3. The Problem that Deferreds Solve 
   4. Deferreds - a signal that data is yet to come 
          * Callbacks 
          * Error handling: errbacks 

    * Using Deferreds 
    * Generating deferreds 
    * Deferreds in depth 

The Deferred mechanism, standardizes the application programmers inferface with 
all sort of blocking and delayed operations. 

What Differeds dont do: Make your code asynchronous!. 

Differeds are the signals for asynchronous functions to use to pass results 
onto the callbacks, but using them does not guarantee that you have 
asynchronous functions. 

The Central concept to the Twisted application model is the concept called 
differeds. A deffered is a value that has not been computed yet. for e.g. 
because it needs data from the remote peer.  

Deffereds can be passed around, just like regular objects but cannot be asked 
for their value. Each Deffered supports a callback chain. When the deffered 
gets  value, it is passed through the callback chain with each one being the 
input for the next one. This allows operating on the values of the deffered 
without knowing what they are. 

Deffereds also support ability to define 'errbacks', which are the callback 
methods but are called as error handlers. 

The above model, allows code, which looks as though it is serial, while still 
maintaining the event driven abstraction. 

Twisted supports abstraction over raw threads. Using threads as a deffered 
source, the deferred will return immediately. 

One of the possible ways to handle concurrency 

High-Level Twisted 

    * Helper programs and scripts (twistd, ..) 
    * Twisted's plugin architecture 
    * Writing Twisted Application Plugins for twistd 
    * Interfaces and Adapters (Component Architecture) 

A Simple example of writing a asynchornous function. 
==================================================== 

 // Code 

Asynchronous Programming with Twisted (1.5 Hour) 
================================================ 

# Tutorials 

    * Writing a TCP server 
    * Writing a TCP client 
    * Setting up the TwistedQuotes application 
    * Designing a Twisted application 
    * Tutorial: Twisted From Scratch - The Famous 'finger tutorial' from  Twisted Documentation. 


References: 
=========== 


[http://pig.slug.org.au/talks/Twisted2/slides.html Good Tutorial]
