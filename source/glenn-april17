Here's some code.  There is a debug print in run_cgi.  This is an 
upgrade of the code I posted in that one bug, upgraded to trunk 
(including fixes from the bug you fixed), plus fixes for the other bugs 
I've submitted recently.

Perhaps more environment variables should be set, I haven't exhaustively 
researched that.

I wasn't sure what exception to raise in check_path_component and I 
suppose then the chosen exception should be mentioned, along with 
IndexError, as a possible Exception return from parse_url.

You'll note the added tests include hiding \ and / using % escapes, and 
verifying that % escapes are left in the query string, and that the 
query string and fragment id are properly separated from the path part 
of the URL.

Testing for proper PATH_INFO would require a known file system content, 
and I haven't figured out enough of the testing environment to even get 
all of these tests running (but all the test_parse_url tests run, it is 
the others that don't), much less how to set up an environment to 
properly test PATH_INFO.  However, PATH_INFO is working well enough to 
run my local copy of my Linux/Apache web site on my Windows 7 PC....

I do have a subclass, and do a few things differently from server.py 
with respect to the Windows environment.  The biggest item is discussed 
in issue 10483. The other item that I subclass parse_request (and then 
call it in the super class) just to provide a hook where I can add code 
to tweak the URL path in a manner similar to (but much more limited 
than) Apache's mod_rewrite module. I only implemented enough to simulate 
the tiny fraction of mod_rewrite features that I use on my Apache web site.

Glenn

Glenn Linderman <v+python@g.nevcal.com> added the comment:

Reading the CGI 1.1 spec, it says:

   The QUERY_STRING value provides the query-string part of the
   Script-URI.  (See section 3.3).

   The server MUST set this variable; if the Script-URI does not include
   a query component, the QUERY_STRING MUST be defined as an empty
   string ("").

Therefore the code in run_cgi that says:

        if query:
            env['QUERY_STRING'] =3D query

should have the conditional removed.

----------

_______________________________________
Python tracker <report@bugs.python.org>
<http://bugs.python.org/issue10486>
_______________________________________

Glenn Linderman <v+python@g.nevcal.com> added the comment:

Reading the CGI 1.1 spec, it says:

   The QUERY_STRING value provides the query-string part of the
   Script-URI.  (See section 3.3).

   The server MUST set this variable; if the Script-URI does not include
   a query component, the QUERY_STRING MUST be defined as an empty
   string ("").

Therefore the code in run_cgi that says:

        if query:
            env['QUERY_STRING'] = query

should have the conditional removed.

----------

_______________________________________
Python tracker <report@bugs.python.org>
<http://bugs.python.org/issue10486>
_______________________________________

--------------030005030606070907060004
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit

On 4/14/2012 1:25 AM, Glenn Linderman wrote:
> 6. detecting drive letters and \ in each path component is OK for 
> files, but may get in the way of passing parameters via PATH_INFO path 
> components, so should probably only be called on path components prior 
> to the actual CGI file, rather than on the whole path.  One could make 
> the case that that is true for /../ detection also.  Turning 
> parameters over to the CGI script also turns over responsibilities to 
> it, which can only be bounded by OS permissions for the effective 
> userid of the CGI script.  It doesn't appear that http.server, is 
> targeted at multiuser, shared hosting servers! So effective userid 
> manipulations are not part of the code base.

However, today Glenn reads in the CGI 1.1 spec, section 4.1.5:

> The server MAY
>     impose restrictions and limitations on what values it permits for
>     PATH_INFO, and MAY reject the request with an error if it encounters
>     any values considered objectionable.  That MAY include any requests
>     that would result in an encoded "/" being decoded into PATH_INFO, as
>     this might represent a loss of information to the script.  Similarly,
>     treatment of non US-ASCII characters in the path is system-defined.

So it would be legal, and simpler, to define that PATH_INFO is not 
allowed to contain os-specific drive parts or os-specific path 
separators or os-specific curdir or pardir values, and check for all 
those up-front in parse-request.
