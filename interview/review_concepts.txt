Linked List
Binary Tree
Tries
Stacks
Queues
Vectors
Array List
Hash Tables

Breadth First Search
Depth First Search
Binary Search
Merge Sort
Quick Sort
Tree Find
Tree Insert
Tree Delete

Bit Manipulation
Singleton Design Pattern
Factory Design Pattern
Memory (Stack vs Heap)
Recursion
Big O

For each of these, know how to implement and use them and bigO complexity.

Rabin Karp Algorithm

Heaps

A heap is really good at basic ordering and keeping track of max and mins
This is actually interesting – if you had two heaps, you could keep track of
the biggest half and the smallest half of the elements   The biggest half is
kept in a min heap, such that the smallest element in the biggest half is at
the root   The smallest half is kept in a max heap, such that the biggest
element of the smallest half is at the root   Now, with these data structures,
you have the potential median elements at the roots   If the heaps are no
longer the same size, you can quickly “rebalance” the heaps by popping an
element off the one heap and pushing it onto the other

Classic problems

Towers of Hanoi

There's a temple in the middle of Hanoi. In that temple, there are three very
large diamond-encrusted posts, and on those posts are sixty-four disks, all of
a different size. There are a set of priests in that temple, and their task is
to move the entire stack of sixty-four disks from one post to a second post.
The rules, though, are, they can only move one disk at a time, and they can
never cover up a smaller disk with a larger disk. Write a  recursive program to
solve this problem. What is the complexity?

Searching and sorting algorithms
Write code to search a sorted list.
Write a binary search algorithm.
Write a selection sort algorithm.
Write code to create a hash table of size 256

Shortest path problem

Write an algorithm to plan a route by minimising distance or time (eg Google Maps)

Traveling salesman

Write an algorithm to determine the least cost round-trip, given multiple cities and varying costs of flights

Knapsack problem

Write an algorithm to optimize the value of items you can fit into a backpack based on weight and volume

Sorting algorithms - know how they work, average/worst case running times, stack space

    Insertion sort
    Quicksort
    Mergesort
    Heapsort



Searching algorithms

    Sequential search
    Binary search
    Hashing
    Binary search trees
    Key indexing


Other algorithms

    Priority queues
    Selection

Back of the envelope calculations

    Know your powers of 2 (binary)
    Be able to express mega/giga/etc in binary and/or scientific notation
    Know cycle times and disk seek times for CPUs
    Explain and justify your assumptions
    Don’t be afraid of dealing with huge numbers!


Sample questions from Programming Pearls

1. How do you sort 10 million 7-digit phone numbers with ~1MB RAM? How would
you solve this using one pass and no intermediate files? What if 1MB RAM was a
firm limit?

2. Given a sequential file that contains at most four billion 32-bit integers
in random order, find a 32-bit integer that isn’t in the file (and there must
be at least one missing...why?). How would you solve this with unlimited main
memory? How would you solve it if you could use several external files but only
a few bytes of main memory?

3. Rotate a one-dimensional vector of n elements left by i positions. For
instance, with n=8 and i=3, the vector abcdefg is rotated to defghabc. Simple
code uses an n-element intermediate vector to do the job in n steps. Can you
rotate the vector in time proportional to n using only a few dozen extra bytes
of storage?

4. Given a dictionary of English words, find sets of anagrams. For instance,
“pots”, “stop”, and “tops” are all anagrams of one another because each can be
found by permuting the letters of the others.

5. Write functions for the following date problems: given two dates, compute
the number of days between them; given a date, return it’s day of the week;
given a month and year, produce a calendar of the month as an array of
characters

6. Given a very long sequence (say, billions or trillions) of bytes, how would
you efficiently count the total number of one bits? (i.e. how many bits are
turned on in the entire sequence)

7. Although Quicksort uses only O(logn) stack space on the average, it can use
linear space in the worst case. Explain why, then modify the program to use
only logarithmic space in the worst case.

8. Write a program for finding the kth-smallest element in the array x[0...n-1]
in O(n) expected time. Your algorithm may permute the elements of x.

9. Build the fastest possible complete function to generate a sorted array of
random integers without duplicates. (You need feel constrained to use any
prescribed interface for set representation)

10. Implement heap-based priority queues to run as quickly as possible; at what
values of n are they faster than sequential structures?
