.. -*- coding: utf-8 -*-
.. include:: <s5defs.txt>
.. |==>| unicode:: U+02794 .. thick rightwards arrow

========================
What's new in Python 3.2
========================

.. sidebar:: Contents
   :class: handout

   .. contents:: :local:

.. class:: center large

   | For Python Users Group, Singapore

.. class:: center small

   | **Senthil Kumaran**
   | orsenthil@gmail.com
   | http://www.uthcode.com

.. class:: handout

        What is coming up new in the Python 3.2 version.

        There are 3 versions of this presentation:

        * `S5 presentation <py32.html>`__
        * `Handout <py32handout.html>`__
        * `reStructuredText source <py32.txt>`__

        ©2010, licensed under a `Creative Commons
        Attribution/Share-Alike (BY-SA) license
        <http://creativecommons.org/licenses/by-sa/3.0/>`__.

Python 3.2 Release Schedule
===========================

* 3.2 beta 1: December 4, 2010. (Feature Freeze)
* 3.2 final: February 19, 2011  (Release Date)
* 3.2 Release Manager: Georg Brandl
* Binaries/Installers: Windows (Martin v. Loewis) and Mac (Ronald Oussoren)

*At the moment* 

::

        Python 3.2rc2+ (py3k:88393M, Feb 11 2011, 19:21:59) 

Python Language Moratorium
==========================

* Python 3.1 was released on June 27, 2009
* Disallows changes to syntax, semantics, and built-ins
* Language Moratorium to allow non-CPython implmentations to
  catchup.
* Help ease the adoption of Python 3.x and provide a more stable base.

.. class:: handout
        
        Here are list of issues which would be handled after moratorium. http://goo.gl/CCqDn

Defining a Stable ABI
=====================

* Python Extension modules were required to be rebuilt for each feature release
* Now, Extension modules can limit themselves to a limited APIs **Py_LIMITED_API**
* During the compilation of applications, the preprocessor macro Py_LIMITED_API
  must be defined. 
* There are list of GLOBALS, Functions available which fall under stable ABI. A definition file is made available.
* There is a converter module, which C source can use to convert itself to ABI compatible way.


.. class:: handout
      
         http://www.python.org/dev/peps/pep-0384/


import argparse
===============

* There is an argparse command line parsing module included in stdlib.
* That makes it 3. getopt,optparse and argparse. It was quite a discussion.
* argparse will be the future and optparse will slowly be deprecated.
* Support for positional args, sub-commands, **'required options'**, pattern for specifying and validating options.
* argparse has the ability to define subparsers, each with their own argument patterns and help displays:


.. class:: handout


        import argparse

        parser = argparse.ArgumentParser(
                    description = 'Manage servers',         # main description for help
                    epilog = 'Tested on Solaris and Linux') # displayed after help
        parser.add_argument('action',                       # argument name
                    choices = ['deploy', 'start', 'stop'],  # three allowed values
                    help = 'action on each target')         # help msg
        parser.add_argument('targets',
                    metavar = 'HOSTNAME',                   # var name used in help msg
                    nargs = '+',                            # require one or more targets
                    help = 'url for target machines')       # help msg explanation
        parser.add_argument('-u', '--user',                 # -u or --user option
                    required = True,                        # make it a required argument
                    help = 'login as user')

        print(parser.parse_args('-h'.split()))

logging module - Configuration Dictionary.
==========================================

* **logging.config.dictConfig()** - logging configuration with plain Python dictionaries.

from concurrent import futures
==============================

* Package for modules which deal with concurrency.
* first one is futures high level interface for managing threads and processes.
* status checks (running or done), timeouts, cancellations, adding callbacks, and access to results or exceptions

pyc directories
===============
* Multiple implementations can refer to their own .pyc files.
* mymodule.cpython-32.pyc, mymodule.cpython-33.pyc, and mymodule.unladen10.pyc
* pyc files are now collected in a **__pycache__** directory stored under the package directory
* Imported modules now have a __cached__ attribute which stores the name of the actual file that was imported
* tag that is unique to each interpreter is accessible from the **imp** module

ABI version tagged .so 
======================

* shared object files by giving them a common directory and distinct names for each version
* common directory is “pyshared” and the file names are made distinct by identifying the Python implementation
* **/usr/share/pyshared/foo.cpython-32m.so**

WSGI 1.1
========

* Well Intentioned Upgrade for WSGI to support Python3.
* Informational PEP clarifies how bytes/text issues are to be handled by the WGSI protocol




Slide-Heading
=============

* Point 1
* Point 2
* Point 3

::

        print('{0},{1}'.format('hello','world'))

.. class:: handout
        
        Handout Notes.

